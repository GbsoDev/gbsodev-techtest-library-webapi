// <auto-generated />
using System;
using GbsoDev.TechTest.Library.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GbsoDev.TechTest.Library.Dal.Migrations
{
    [DbContext(typeof(RootContext))]
    [Migration("20230709205326_initianl-migration")]
    partial class initianlmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 9, 15, 53, 26, 312, DateTimeKind.Local).AddTicks(4094));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.ToTable("autores", (string)null);
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.AutorHasLibro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int")
                        .HasColumnName("autores_id");

                    b.Property<decimal>("LibroId")
                        .HasColumnType("numeric(13,0)")
                        .HasColumnName("libros_ISBN");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.HasIndex("AutorId", "LibroId")
                        .IsUnique();

                    b.ToTable("autores_has_libros", (string)null);
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Editorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Sede")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.ToTable("Editoriales", (string)null);
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Libro", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(13, 0)")
                        .HasColumnName("ISBN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NPaginas")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("EditorialId");

                    b.ToTable("libros", (string)null);
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.AutorHasLibro", b =>
                {
                    b.HasOne("GbsoDev.TechTest.Library.El.Autor", "Autor")
                        .WithMany("AutorHasLibros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GbsoDev.TechTest.Library.El.Libro", "Libro")
                        .WithMany("LibroHasAutores")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Libro", b =>
                {
                    b.HasOne("GbsoDev.TechTest.Library.El.Editorial", "Editorial")
                        .WithMany("Libros")
                        .HasForeignKey("EditorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editorial");
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Autor", b =>
                {
                    b.Navigation("AutorHasLibros");
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Editorial", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("GbsoDev.TechTest.Library.El.Libro", b =>
                {
                    b.Navigation("LibroHasAutores");
                });
#pragma warning restore 612, 618
        }
    }
}
